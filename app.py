"""
Aplicaci√≥n Streamlit para consultar precios de productos por c√≥digo QR
"""

import streamlit as st
import time
from odoo_client import OdooClient, AppConfig
from barcode_scanner import BarcodeScanner


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Configurar p√°gina
    st.set_page_config(
        page_title="Puya Price Scanner",
        page_icon="üì±",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    # CSS personalizado
    st.markdown("""
    <style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        font-size: 3rem;
        margin-bottom: 2rem;
    }
    .scan-button {
        text-align: center;
        margin: 2rem 0;
    }
    .product-info {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .price {
        font-size: 2.5rem;
        color: #28a745;
        font-weight: bold;
        text-align: center;
    }
    .stock {
        font-size: 2rem;
        color: #007bff;
        font-weight: bold;
        text-align: center;
    }
    .product-name {
        font-size: 1.5rem;
        color: #333;
        text-align: center;
        margin-bottom: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">üì± Puya Price Scanner</h1>', unsafe_allow_html=True)
    
    # Verificar credenciales de Odoo
    if not AppConfig.validate_odoo_credentials():
        st.error("‚ùå Configuraci√≥n incompleta de Odoo. Verifica las credenciales en Streamlit Cloud.")
        st.stop()
    
    # Inicializar variables de sesi√≥n
    if 'scanner' not in st.session_state:
        st.session_state.scanner = BarcodeScanner()
    if 'scanning' not in st.session_state:
        st.session_state.scanning = False
    if 'product_info' not in st.session_state:
        st.session_state.product_info = None
    if 'last_barcode' not in st.session_state:
        st.session_state.last_barcode = None
    
    # Landing page
    if not st.session_state.scanning:
        show_landing_page()
    else:
        show_scanner_page()


def show_landing_page():
    """Muestra la p√°gina de inicio"""
    
    st.markdown("""
    <div style="text-align: center; margin: 2rem 0;">
        <h2>üîç Consulta precios de productos por c√≥digo QR</h2>
        <p style="font-size: 1.2rem; color: #666;">
            Escanea cualquier c√≥digo QR para obtener informaci√≥n del producto:
        </p>
        <ul style="text-align: left; display: inline-block; font-size: 1.1rem;">
            <li>üí∞ Precio de venta</li>
            <li>üì¶ Stock disponible</li>
            <li>üìù Nombre del producto</li>
        </ul>
        
        <div style="margin: 2rem 0; padding: 1rem; background-color: #f8f9fa; border-radius: 10px;">
            <h3>üí° Optimizado para c√≥digos QR:</h3>
            <p><strong>üì± C√≥digos QR:</strong> M√°s f√°ciles de escanear con m√≥viles</p>
            <p><strong>‚ö° Escaneo autom√°tico:</strong> Sin necesidad de entrada manual</p>
            <p><strong>üîç Detecci√≥n inteligente:</strong> Funciona desde cualquier √°ngulo</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Bot√≥n central para iniciar escaneo
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üöÄ INICIAR ESCANEO", type="primary", use_container_width=True):
            st.session_state.scanning = True
            st.rerun()
    
    # Mostrar informaci√≥n del √∫ltimo producto consultado
    if st.session_state.product_info:
        st.markdown("---")
        st.markdown("### üìã √öltimo producto consultado:")
        show_product_info(st.session_state.product_info)


def show_scanner_page():
    """Muestra la p√°gina del esc√°ner"""
    
    st.markdown("""
    <div style="text-align: center; margin: 1rem 0;">
        <h2>üì± Esc√°ner Autom√°tico de C√≥digos QR</h2>
        <p>Escanea autom√°ticamente el c√≥digo QR del producto</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Bot√≥n para volver
    if st.button("‚Üê Volver al inicio"):
        st.session_state.scanning = False
        st.session_state.scanner.reset_scanner()
        st.rerun()
    
    # Obtener c√≥digo QR con escaneo autom√°tico
    barcode = st.session_state.scanner.scan_with_fallback()
    
    if barcode:
        # Verificar que no sea el mismo c√≥digo
        if barcode != st.session_state.last_barcode:
            st.session_state.last_barcode = barcode
            
            # Consultar producto en Odoo
            with st.spinner("üîç Consultando informaci√≥n del producto..."):
                product_info = get_product_info(barcode)
            
            if product_info:
                st.session_state.product_info = product_info
                show_product_info(product_info)
                
                # Bot√≥n para escanear otro producto
                if st.button("üîç Escanear otro producto"):
                    st.session_state.last_barcode = None
                    st.session_state.scanner.reset_scanner()
                    st.rerun()
            else:
                st.error("‚ùå Producto no encontrado en la base de datos")
                
                # Bot√≥n para intentar de nuevo
                if st.button("üîÑ Intentar con otro c√≥digo"):
                    st.session_state.last_barcode = None
                    st.session_state.scanner.reset_scanner()
                    st.rerun()


def get_product_info(barcode: str):
    """Obtiene informaci√≥n del producto desde Odoo"""
    
    try:
        # Obtener credenciales
        credentials = AppConfig.get_odoo_credentials()
        
        # Crear cliente de Odoo
        client = OdooClient(
            url=credentials['url'],
            db=credentials['db'],
            username=credentials['username'],
            password=credentials['password']
        )
        
        # Consultar producto
        return client.get_product_by_barcode(barcode)
        
    except Exception as e:
        st.error(f"Error al consultar producto: {str(e)}")
        return None


def show_product_info(product_info):
    """Muestra la informaci√≥n del producto (solo precio y stock)"""
    
    st.markdown("""
    <div class="product-info">
    """, unsafe_allow_html=True)
    
    # Nombre del producto
    st.markdown(f'<p class="product-name">üìù {product_info["name"]}</p>', unsafe_allow_html=True)
    
    # Precio
    price = product_info.get('list_price', 0.0)
    st.markdown(f'<p class="price">üí∞ ${price:,.2f}</p>', unsafe_allow_html=True)
    
    # Stock disponible
    stock = product_info.get('immediately_usable_qty', 0)
    st.markdown(f'<p class="stock">üì¶ {stock:,.0f} unidades</p>', unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)


if __name__ == "__main__":
    main() 